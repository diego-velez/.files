#!/usr/bin/python

import os
from socket import AF_UNIX, socket
import subprocess
import sys
import random
import time
import json
from typing import TypedDict, cast

screensavers = [
    "/home/linuxbrew/.linuxbrew/bin/pipes.sh -r 0 -R -p 5",
    "asciiquarium",
    "cmatrix -r",
    "lavat -k black -c magenta -s 3 -r 1 -b 10",
    "conway-screensaver",
    "c-squares -d 2 -t 3",
]

window_class = "dvt_screensaver"


class Layout(TypedDict):
    pos_in_scrolling_layout: list[int]
    tile_size: list[int]
    window_size: list[int]
    tile_pos_in_workspace_view: bool | None
    window_offset_in_tile: list[int]


class FocusedWindowResp(TypedDict):
    id: int
    title: str
    app_id: str
    pid: int
    workspace_id: int
    is_focused: bool
    is_floating: bool
    is_urgent: bool
    layout: Layout


class OkResp(TypedDict):
    FocusedWindow: FocusedWindowResp | None


class NiriReply(TypedDict, total=False):
    Ok: OkResp
    Err: str


def run_screensaver(screensaver: str) -> bool:
    # We want different font size for certain screensavers
    if screensaver == screensavers[3]:
        # fmt: off
        _ = subprocess.Popen(["wezterm-gui", "--config", "font_size=16", "start", "--class", window_class, "--", "sh", "-c", f"sleep 0.4 && {screensaver}"])
    elif screensaver == screensavers[5]:
        # fmt: off
        _ = subprocess.Popen(["wezterm-gui", "--config", "font_size=24", "start", "--class", window_class, "--", "sh", "-c", f"sleep 0.4 && {screensaver}"])
    else:
        # fmt: off
        _ = subprocess.Popen(["wezterm-gui", "--config", "font_size=8", "start", "--class", window_class, "--", "sh", "-c", f"sleep 0.4 && {screensaver}"])

    time.sleep(0.6)

    if not screensaver_is_open():
        print(
            f"Something went wrong opening the {screensaver} screensaver",
            file=sys.stderr,
        )
        return False

    _ = subprocess.Popen(["niri", "msg", "action", "fullscreen-window"]).wait()
    return True


def screensaver_is_open() -> bool:
    # See https://yalter.github.io/niri/niri_ipc/index.html
    sock = socket(AF_UNIX)
    sock.connect(os.environ["NIRI_SOCKET"])
    sock.send(b'"FocusedWindow"\n')
    chunk = sock.recv(4096)
    sock.close()
    niri_reply = cast(NiriReply, json.loads(chunk))

    if "Err" in niri_reply:
        print("Error communicating with Niri:", niri_reply["Err"], file=sys.stderr)
        exit(1)
    assert "Ok" in niri_reply

    focused_window = niri_reply["Ok"]["FocusedWindow"]
    if focused_window is None:  # No window is currently open in the current workspace
        return False

    app_id = focused_window["app_id"].strip()
    return app_id == window_class


def run():
    if screensaver_is_open():
        print("A screensaver is already running!")
        exit(1)

    # Run the screensavers in a random order
    random.shuffle(screensavers)

    # Try running all of the screensavers until one actually runs
    for screensaver in screensavers:
        print(f"Attempting to run {screensaver}")
        if run_screensaver(screensaver):
            print("Success!")
            break


def close():
    if not screensaver_is_open():
        print("Attempted to close a screensaver but none is open!")
        exit(0)

    output = subprocess.run(
        ["niri", "msg", "action", "close-window"], capture_output=True
    )
    if output.returncode != 0:
        print(
            "Something went wrong closing the screensaver",
            output.stderr,
            file=sys.stderr,
        )
        exit(output.returncode)
    print("Closed screensaver!")


ARGS = {"run": run, "close": close}

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Must specify one argument, either 'run' or 'close'")
        exit(1)

    action = sys.argv[1]
    action_is_valid = action in ARGS.keys()
    if not action_is_valid:
        print(f"{action} is not valid argument, either 'run' or 'close'")
        exit(1)

    ARGS[action]()
